{"version":3,"sources":["webpack:///webpack/bootstrap 1af9684717c0b6bdb9a8","webpack:///./js/main.js","webpack:///./js/grid.js","webpack:///./js/flood_logic.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;AC7DqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;AC/BkC;;AAEnC;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AC/DuB;AACc;;AAErC,eAAsB;AACtB;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAe;AACpC,yBAAyB,sDAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uFAAwC;AACxC;AACA,mCAAmC;AACnC,wDAAwD;AACxD;AACA;;AAEA;AACA,qBAAqB,sDAAe;AACpC,yBAAyB,sDAAe;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,C","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1af9684717c0b6bdb9a8","import { createGrid } from './grid';\n\nexport let numRows = 14;\nexport let numCols = 14;\nexport let numColors = 6;\nexport let maxMoves = 25;\n\nfunction setGridSpecs() {\n    let queryString = window.location.search;\n    if (queryString === null || queryString === \"\" || queryString == \"?\") return;\n    queryString = queryString.substr(1);\n    const gameParams = queryString.split(\"&\");\n    for (let i = 0; i < gameParams.length; i++) {\n        const param = gameParams[i].split(\"=\");\n        const paramName = param[0];\n        const paramValue = param[1];\n        if (paramName === 'size') {\n            numCols = Number(paramValue);\n            numRows = Number(paramValue);\n        } else if (paramName === 'numColors') {\n            numColors = Number(paramValue);\n        }\n    }\n    let defaultConditions = (14 + 14) * 6;\n    let gameConditions = (numRows + numCols) * numColors;\n    maxMoves = Math.floor(25 * (gameConditions / defaultConditions));\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    setGridSpecs();\n    createGrid(numRows, numCols, numColors);\n});\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/main.js\n// module id = 0\n// module chunks = 0","import { handleFlood, displayInfo } from './flood_logic';\n\nexport const table = new Array(14);\nexport const tiles = new Array(14);\n\nfunction createContainers() {\n    const displayTable = document.createElement('section');\n    displayTable.id = 'flood_grid';\n    const infoAside = document.createElement('aside');\n    infoAside.id = 'info';\n    const gameContainer = document.getElementById('game_container');\n    gameContainer.appendChild(infoAside);\n    gameContainer.appendChild(displayTable);\n    return displayTable;\n}\n\nexport function createGrid (rowCount, colCount, numColors) {\n    const displayTable = createContainers();\n    for (let row = 0; row < rowCount; row++) {\n        table[row] = new Array(colCount);\n        const newRow = document.createElement('ul');\n        newRow.className = 'row';\n        tiles[row] = newRow;\n        for (let col = 0; col < colCount; col++){\n            const tileColor = colorClass(numColors);\n            table[row][col] = { color: tileColor, flooded: false };\n            tiles[row][col] = buildTile(tileColor, row, col, newRow);\n        }\n        displayTable.appendChild(newRow);\n    }\n    table[0][0].flooded = true;\n    tiles[0][0].flooded = true;\n    handleFlood(null, tiles[0][0].className);\n    \n    return table;\n}\n\nfunction buildTile(tileColor, row, col, parentEl) {\n    let tile = document.createElement('li');\n    tile.row = row;\n    tile.col = col;\n    tile.id = 'tile';\n    tile.flooded = false;\n    tile.className = `${tileColor}`;\n    const originTile = tiles[0][0] || tile;\n    tile.onclick = () => handleFlood(originTile.className, tile.className);\n    parentEl.appendChild(tile);\n    return tile;\n}\n\nconst tileColorClasses = [\n    \"purple\",\n    \"red\",\n    \"blue\",\n    \"green\",\n    \"orange\",\n    \"yellow\",\n    \"grey\",\n    \"teal\"\n];\n\nconst colorClass = function (numColors) {\n    return tileColorClasses[Math.floor(Math.random() * Math.floor(numColors))];\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/grid.js\n// module id = 1\n// module chunks = 0","import { table, tiles } from './grid';\nimport { numRows, numCols, maxMoves } from './main';\n\nexport let moves = -1;    // Call flood when creating grid to attach initial matches\nlet finished = false;\n\n\nexport function displayInfo() {\n    const infoEl = document.getElementById('info');\n    const movesEl = document.createElement('h3');\n    const instructionsEl = document.createElement('h4');\n\n    movesEl.innerHTML = moves + '/' + maxMoves;\n    instructionsEl.innerHTML = \"Click a tile and try to flood the map!\";\n\n    infoEl.appendChild(movesEl);\n    if (moves < 1) infoEl.appendChild(instructionsEl);\n    \n}\n\nexport function handleFlood(oldColor, newColor) {\n    if (finished) return;\n    // Do nothing if clicked tile is original\n    if (oldColor === newColor) return;\n    moves++;\n    for (let row = 0; row < numRows; row++) {\n        for (let col = 0; col < numCols; col++) {\n            if (tiles[row][col].flooded) {\n                floodTile(row, col, newColor);\n                floodNeighbors(row, col, newColor);\n            }\n        }\n    }\n    gameOver();\n    displayInfo();\n}\n\nfunction floodTile(row, col, color) {\n    tiles[row][col].className = '';\n    tiles[row][col].className = color;\n    tiles[row][col].flooded = true;\n}\n\nfunction floodNeighbors(row, col, color) {\n    if (row < numRows - 1) canBeFlooded(row + 1, col, color);\n    if (row > 0) canBeFlooded(row - 1, col, color);\n    if (col < numCols - 1) canBeFlooded(row, col + 1, color);\n    if (col > 0) canBeFlooded(row, col - 1, color);\n}\n\nfunction canBeFlooded(row, col, color) {\n    if (tiles[row][col].flooded) return; // Skip if it is already flooded\n    if (tiles[row][col].className === color){\n        floodTile(row, col, color);    // Toggle Flood\n        setTimeout(floodNeighbors(row, col, color), 15);   // Check the neighbors\n    }\n}\n\nfunction floodedBoard(){\n    for (let row = 0; row < numRows; row++){\n        for (let col = 0; col < numCols; col++){\n            if (!tiles[row][col].flooded) return;\n        }\n    }\n    finished = true;\n}\n\nfunction gameOver() {\n    floodedBoard();\n    if (finished){\n        if (moves <= maxMoves) {\n            alert('You won!');\n        } else {\n            alert('You Lost!');\n        }\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/flood_logic.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}